generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// graphql mutation limitations requre data objects to be monolithic in nature.
model Bcard {
  id                 Int           @id @default(autoincrement())
  selfie             String
  netlify_id         String
  name               String
  cell_number        String?
  email              String?
  was_updated        Boolean?      @default(false)
  profession         String
  specialization1    String
  specialization1exp Int
  spreference1       String?
  specialization2    String?
  specialization2exp Int?
  spreference2       String?
  specialization3    String?
  specialization3exp Int?
  spreference3       String?
  UserResudex        UserResudex[]
}

// User logs. currently used for selfie generation across buisnesscards. SELFIE ID MAX VALUE OF 649 TELL FRONT END
model User {
  id         Int     @id @default(autoincrement())
  netlify_id String? @unique
  selfie_id  Int?
}

// updatd our deleted bcards are saved here for version control.
model VersionBcard {
  id                 Int      @id @default(autoincrement())
  selfie             String
  netlify_id         String
  name               String
  cell_number        String?
  email              String?
  was_updated        Boolean? @default(false)
  was_deleted        Boolean? @default(false)
  profession         String
  specialization1    String
  specialization1exp Int
  spreference1       String?
  specialization2    String?
  specialization2exp Int?
  spreference2       String?
  specialization3    String?
  specialization3exp Int?
  spreference3       String?
}

// Users can only save nondeletedcards that currently exist in the DB
model UserResudex {
  id         Int    @id @default(autoincrement())
  netlify_id String
  bcard      Bcard? @relation(fields: [bcard_id], references: [id])
  bcard_id   Int?
}

// type safe reference for bcard creation form
// model Profession {
//   id              Int              @id @unique @default(autoincrement())
//   type            String           @unique
//   bcard           Bcard[]
//   specializations Specialization[]
// }

//type safe reference for bcard creation form
// model Specialization {
//   id            Int        @id @unique @default(autoincrement())
//   type          String     @unique
//   profession    Profession @relation(fields: [profession_id], references: [id])
//   profession_id Int
//   st1           Bcard[]    @relation("Specialization1")
//   st2           Bcard[]    @relation("Specialization2")
//   st3           Bcard[]    @relation("Specialization3")
// }
